#!/usr/bin/env python

import os
import sys
import json
import copy

MAIN_REPO_TMP_DIR = 'MAIN_REPO_TMP'
installed = {}

def main():
    if len(sys.argv) < 2:
        help()
        quit()

    os.chdir(os.path.expanduser('~'))

    args = copy.deepcopy(sys.argv)
    program = args.pop(0)
    command = args.pop(0).replace('-', '_')

    if command in globals():
        globals()[command](*args)
    else:
        print colored('unknown command: ' + command, 'red')
        help()


def help(command=None):
    if command:
        print 'rehome {}'.format(command)
        print '   more description later'
    else:
        print('usage: rehome <command> [<args>]')
        print('   init      <repo>      init-home install')
        print('   reinit    [<repo>]    init-home update')
        print('   install               set-shell install-repos run-installs')
        print('   update                set-shell update-repos run-installs run-updates')
        print('   set-shell [<shell>]   Sets given or configured shell with `chsh`')


def init(repo):
    init_home(repo)
    install()
    notice('. inited home', 'success')


def reinit(repo=None):
    init_home(repo)
    update(repo)
    notice('. reinited home', 'success')


def install():
    set_shell()
    install_repos()
    run_installs()


def update(repo=None):
    pull('.', repo)
    set_shell()
    update_repos()
    run_installs()
    run_updates()


def run_installs():
    config = get_config()
    if 'installs' not in config:
        return
    if 'updates' not in config:
        installs = config['installs']
    else:
        installs = config['updates'].copy()
        installs.update(config['installs'])
    for path, commands in installs.iteritems():
        if not os.path.exists(path):
            mark_installed(path)
            if run_commands(commands):
                warning('x failed install ' + path, 'error')


def mark_installed(path):
    global installed
    installed[path] = 1


def is_installed(path):
    global installed
    return path in installed


def run_updates():
    config = get_config()
    if 'updates' not in config:
        return
    for path, commands in config['updates'].iteritems():
        if not is_installed(path):
            if run_commands(commands):
                warning('x failed update ' + path, 'error')


def run_commands(commands):
    if type(commands) is not list:
        commands = [commands]
    for command in commands:
        if system(command):
            return True


def install_repos():
    config = get_config()
    if 'repos' not in config:
        return
    for dir, repo in config['repos'].iteritems():
        if not os.path.exists(dir):
            clone(repo, dir)


def update_repos():
    config = get_config()
    if 'repos' not in config:
        return
    for dir, repo in config['repos'].iteritems():
        pull(dir, repo)


def get_config():
    if 'config' not in globals():
        load_config()
    return config


def load_config(path='.rehome.json'):
    global config
    if not os.path.exists(path):
        die('X no config found')
    with open(path) as file:
        config = json.load(file)


def init_home(repo):
    if os.path.exists('.git'):
        notice('+ .git already exists')
        return
    if clone(repo, MAIN_REPO_TMP_DIR):
        die('X failed clone main repo')
    rsync(MAIN_REPO_TMP_DIR, '.')
    if system('rm -rf ' + MAIN_REPO_TMP_DIR):
        return


def set_shell(shell=None):
    if not shell:
        config = get_config()
        if 'shell' not in config:
            return
        shell = config['shell']
    path = find_shell(shell)
    if not path:
        warning('! wrong shell: ' + shell)
        return
    if os.path.basename(os.environ.get('SHELL', '')) != shell:
        system('chsh -s ' + path)


def find_shell(shell):
    if os.path.exists(shell):
        return shell
    return which(shell)


def rsync(src, dst):
    system('rsync -a {}/ {}/'.format(src, dst))


def pull(path, repo=None):
    if os.path.exists(path):
        return system('git -C {} pull --rebase'.format(path))
    else:
        return clone(repo, path)


def clone(repo, path=''):
    if not repo:
        warning('x no repo given for "{}"'.format(path), 'error')
        return
    repo = normalize_repo(repo)
    if os.path.exists(path):
        return
    return system('git clone {} {}'.format(repo, path))


def normalize_repo(repo):
    if repo[0] == '/' or repo[0] == '.':
        return repo
    if '://' not in repo and '@' not in repo:
        repo = 'git@github.com:' + repo
        #repo = 'https://github.com/' + repo
    return repo


def system(command):
    notice('> ' + command.rstrip())
    result = os.system(command)
    if result:
        warning('! failed: {}'.format(result))
    return result


def die(text, color='error'):
    print colored(text, color)
    quit()


def warning(text, color='warning'):
    print colored(text, color)


def notice(text, color='notice'):
    print colored(text, color)


def which(binary):
    return backtick('which ' + binary)


def backtick(command):
    return os.popen(command).read().strip()


def colored(text, color):
    types = {
        'notice':   'white',
        'success':  'green',
        'warning':  'yellow',
        'error':    'red',
    }
    colors = {
        'normal':   '',
        'white':    '\033[97m',
        'cyan':     '\033[96m',
        'magenta':  '\033[95m',
        'blue':     '\033[94m',
        'yellow':   '\033[93m',
        'green':    '\033[92m',
        'red':      '\033[91m',
        'end':      '\033[0m',
    }
    if color in types:
        color = types[color]
    return colors[color] + text + colors['end']

if __name__ == '__main__':
    main()
